#include "Timer.h"
#include "DataMule.h"
#include "Bcp.h"
#include "StorageVolumes.h"

module DataMuleNodeC @safe(){
  uses {
    interface Leds;
    interface Boot;
//    interface AMSend as RadioSend;
//    interface Packet as RadioPacket;
    interface SplitControl as RadioControl;
    interface Send;
    interface Receive;
    interface Packet;
    interface BcpPacket;
    interface Get<uint16_t>;
    interface StdControl;
    interface RootControl;
    interface CC2420Config;
    interface LogWrite;
  }
}
implementation {

  uint16_t counter = 0;

  data_mule_log logData;
   
  event void Boot.booted() {
    logData.txCount = 0;
    logData.hopCount = 0;
    logData.delay = 0;
    logData.queueSize = 0;
    call CC2420Config.setAddressRecognition(FALSE, TRUE);
    call RadioControl.start();
  }

  event void RadioControl.startDone(error_t err) {
    if (err == SUCCESS) {
      call Leds.led1On();
      call StdControl.start();
      call RootControl.setRoot();
    }
    else {
      call RadioControl.start();
    }
  }

  event void RadioControl.stopDone(error_t err) {}

  event void CC2420Config.syncDone(error_t err) {}

  event void Send.sendDone(message_t* bufPtr, error_t error) {}

  event message_t* Receive.receive(message_t* msg, void* payload, uint8_t len) {
    if (len == sizeof(data_mule_msg)) {
      counter++;

      call Leds.led2Toggle();

      logData.txCount = call BcpPacket.getTxCount(msg);
      logData.hopCount = call BcpPacket.getHopCount(msg);
      logData.delay = call BcpPacket.getDelay(msg);
      logData.queueSize = call Get.get();

      if(counter%20 == 0) {
        //logData.queueSize = call Get.get();
        call LogWrite.append(&logData, sizeof(logData));
      }
    }

  }

  event void LogWrite.eraseDone(error_t err) {}

  event void LogWrite.syncDone(error_t err) {
    call Leds.led0Toggle();
  }

  event void LogWrite.appendDone(void* buf, storage_len_t len, bool recordsLost, error_t err) {
    if (err == SUCCESS) {
      call LogWrite.sync();
    }
  }
}
